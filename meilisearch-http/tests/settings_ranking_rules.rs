use assert_json_diff::assert_json_eq;use serde_json::json;mod common;#[actix_rt::test]async fn write_all_and_delete() {let mut server = common::Server::test_server().await;let body = json!(["typo","words","proximity","attribute","wordsPosition","exactness","desc(registered)","desc(age)",]);server.update_ranking_rules(body.clone()).await;let (response, _status_code) = server.get_ranking_rules().await;assert_json_eq!(body, response, ordered: false);server.delete_ranking_rules().await;let (response, _status_code) = server.get_ranking_rules().await;let expected = json!(["typo","words","proximity","attribute","wordsPosition","exactness"]);assert_json_eq!(expected, response, ordered: false);}#[actix_rt::test]async fn write_all_and_update() {let mut server = common::Server::test_server().await;let body = json!(["typo","words","proximity","attribute","wordsPosition","exactness","desc(registered)","desc(age)",]);server.update_ranking_rules(body.clone()).await;let (response, _status_code) = server.get_ranking_rules().await;assert_json_eq!(body, response, ordered: false);let body = json!(["typo","words","proximity","attribute","wordsPosition","exactness","desc(registered)",]);server.update_ranking_rules(body).await;let (response, _status_code) = server.get_ranking_rules().await;let expected = json!(["typo","words","proximity","attribute","wordsPosition","exactness","desc(registered)",]);assert_json_eq!(expected, response, ordered: false);}#[actix_rt::test]async fn send_undefined_rule() {let mut server = common::Server::with_uid("test");let body = json!({"uid": "test","primaryKey": "id",});server.create_index(body).await;let body = json!(["typos",]);let (_response, status_code) = server.update_ranking_rules_sync(body).await;assert_eq!(status_code, 400);}#[actix_rt::test]async fn send_malformed_custom_rule() {let mut server = common::Server::with_uid("test");let body = json!({"uid": "test","primaryKey": "id",});server.create_index(body).await;let body = json!(["dsc(truc)",]);let (_response, status_code) = server.update_ranking_rules_sync(body).await;assert_eq!(status_code, 400);}#[actix_rt::test]async fn write_custom_ranking_and_index_documents() {let mut server = common::Server::with_uid("test");let body = json!({"uid": "test","primaryKey": "id",});server.create_index(body).await;let body = json!(["asc(name)", "typo"]);server.update_ranking_rules(body).await;let body = json!([{"id": 1,"name": "Cherry Orr","color": "green"},{"id": 2,"name": "Lucas Hess","color": "yellow"}]);server.add_or_replace_multiple_documents(body).await;let expected = json!({"id": 1,"name": "Cherry Orr","color": "green"});let (response, status_code) = server.get_document(1).await;assert_eq!(status_code, 200);assert_json_eq!(response, expected, ordered: false);}