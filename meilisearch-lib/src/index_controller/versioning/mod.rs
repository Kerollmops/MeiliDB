use std::fs::{File, OpenOptions};
use std::io::{ErrorKind, Read, Write};
use std::path::Path;

use self::error::VersionFileError;

mod error;

const VERSION_FILE_NAME: &str = "VERSION";

static VERSION_MAJOR: &str = env!("CARGO_PKG_VERSION_MAJOR");
static VERSION_MINOR: &str = env!("CARGO_PKG_VERSION_MINOR");
static VERSION_PATCH: &str = env!("CARGO_PKG_VERSION_PATCH");

// Persists the version of the current MeiliSearch binary to a VERSION file
pub fn create_version_file(db_path: &Path) -> anyhow::Result<()> {
    let version_path = db_path.join(VERSION_FILE_NAME);
    let mut file = OpenOptions::new()
        .write(true)
        .create(true)
        .truncate(true)
        .open(version_path)?;

    file.write_all("# Do not edit this file unless you know what you're doing\n".as_bytes())?;

    let version = format!("{}.{}.{}", VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH);
    file.write_all(version.as_bytes())?;

    Ok(())
}

// Ensures Meilisearch version is compatible with the database, returns an error versions mismatch.
pub fn check_version_file(db_path: &Path) -> anyhow::Result<()> {
    let version_path = db_path.join(VERSION_FILE_NAME);

    match File::open(&version_path) {
        Ok(mut file) => {
            let mut version = String::new();
            file.read_to_string(&mut version)?;

            // Take the first uncommented line in the file
            let version = version
                .lines()
                .find(|line| !line.starts_with('#'))
                .ok_or(VersionFileError::EmptyVersionFile)?;

            let version_components = version.split('.').collect::<Vec<_>>();
            let (major, minor, patch) = match &version_components[..] {
                [major, minor] => (major.to_string(), minor.to_string(), "XX".to_string()),
                [major, minor, patch] => (major.to_string(), minor.to_string(), patch.to_string()),
                [major, minor, patch @ ..] => {
                    (major.to_string(), minor.to_string(), patch.join("."))
                }
                _ => return Err(VersionFileError::MalformedVersionFile.into()),
            };

            if major != VERSION_MAJOR || minor != VERSION_MINOR {
                return Err(VersionFileError::VersionMismatch {
                    major,
                    minor,
                    patch,
                }
                .into());
            }
        }
        Err(error) => {
            return match error.kind() {
                ErrorKind::NotFound => Err(VersionFileError::MissingVersionFile.into()),
                _ => Err(error.into()),
            }
        }
    }

    Ok(())
}
